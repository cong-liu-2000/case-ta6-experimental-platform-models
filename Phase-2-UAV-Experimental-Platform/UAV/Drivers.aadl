package Drivers
public
	with CASE_Model_Transformations;
	with CMASI;
    with CASEAgree;

	thread RadioDriver
		-- The RadioDriver is the software that enables other SW components to communicate to other systems over RF
		features
			recv_data: in event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
			send_data: out event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
			
			-- UxAS
            AutomationResponse: in event data port CMASI::AutomationResponse.i;
            AirVehicleState: in event data port CMASI::AirVehicleState.i;
            
            AutomationRequest: out event data port CMASI::AutomationRequest.i;
            OperatingRegion: out event data port CMASI::OperatingRegion.i;
            LineSearchTask: out event data port CMASI::LineSearchTask.i;
            
		properties
            Dispatch_Protocol => Sporadic;
            
			-- KEEP
--		annex agree {**
--			guarantee Req001_RadioDriver "Only valid command messages shall be forwarded to message destination components" : VALID_MESSAGE(MissionCommand);
--		**};
	end RadioDriver;

	thread implementation RadioDriver.Impl
	end RadioDriver.Impl;

	thread UARTDriver
		-- The UARTDriver is the software that enables other SW components to communicate to other systems over the serial connection
		features
			recv_data: in event data port CASE_Model_Transformations::CASE_UART_Msg.Impl;
            MissionCommand: in event data port CMASI::MissionCommand.i;
        
            send_data: out event data port CASE_Model_Transformations::CASE_UART_Msg.Impl;    
			AirVehicleState: out event data port CMASI::AirVehicleState.i;
		properties
            Dispatch_Protocol => Sporadic;
		annex agree {**     
		    assume Req001_UARTDriver "Assumes recv_data only gets well formed CASE_UART_Msg.Impl types" : 
		        CASEAgree::WellformedCASE_UART_Msg(recv_data);        
		    assume Req002_UARTDriver "Assumes MissionCommand only gets well formed CASEMissionCommand.i types" :
		        CASEAgree::WellformedCASEMissionCommand(MissionCommand); 
		        
		    guarantee Req003_UARTDRiver "The send_data outputs only well formed CASE_UART_Msg.Impl types" : 
                CASEAgree::WellformedCASE_UART_Msg(send_data);
--		**};
	end UARTDriver;

	thread implementation UARTDriver.Impl
	end UARTDriver.Impl;

    thread GimbalDriver
    	features
    	   AirVehicleState: in event data port CMASI::AirVehicleState.i;
           VehicleActionCommand: in event data port CMASI::VehicleActionCommand.i;
    	properties
            Dispatch_Protocol => Sporadic;
    		-- ASSUME: valid AirVehicleState
    		-- Guarantee: well formed action command
--        annex agree {**
--        **};
    end GimbalDriver;

    thread implementation GimbalDriver.Impl
    end GimbalDriver.Impl;

end Drivers;