package SW
public
	with Drivers;
	with CASE_Model_Transformations;
	with CASEAgree;
	with CASE_Properties;
	with CASE_Scheduling;
	with CMASI;
	renames AGREE_PLTL::all;
	with HAMR;

	
	------------------
	-- Radio Driver --
	------------------

--	thread RadioDriver_Attestation_thr extends Drivers::RadioDriver
--		features
--			trusted_ids: out data port CMASI::Address {Data_Model::Data_Representation => Array;
--				Data_Model::Dimension => (3);};
--		properties
--			Dispatch_Protocol => Periodic;
--			Period => 500ms;
--			Compute_Execution_Time => 20ms .. 20ms;
--	end RadioDriver_Attestation_thr;
--
--	thread implementation RadioDriver_Attestation_thr.Impl extends Drivers::RadioDriver.Impl
--	end RadioDriver_Attestation_thr.Impl;
	
	thread RadioDriver_Attestation_thr
	   features
            trusted_ids: out data port CMASI::AddressArray.i;

            AutomationRequest: out event data port CMASI::AddressAttributedMessage.i;
            OperatingRegion: out event data port CMASI::AddressAttributedMessage.i;
            LineSearchTask: out event data port CMASI::AddressAttributedMessage.i; 
       properties
            Dispatch_Protocol => Periodic;
            Period => 500ms;
            Compute_Execution_Time => 2ms .. 2ms;        
	end RadioDriver_Attestation_thr;
	
	thread implementation RadioDriver_Attestation_thr.Impl
	    
	end RadioDriver_Attestation_thr.Impl;
	
	process RadioDriver_Attestation
		features

			trusted_ids: out data port CMASI::AddressArray.i;

			AutomationRequest: out event data port CMASI::AddressAttributedMessage.i;
			OperatingRegion: out event data port CMASI::AddressAttributedMessage.i;
			LineSearchTask: out event data port CMASI::AddressAttributedMessage.i;
		properties
			CASE_Scheduling::Domain => 2;
	end RadioDriver_Attestation;
	
	process implementation RadioDriver_Attestation.Impl
		subcomponents
			RadioDriver_Attestation: thread RadioDriver_Attestation_thr.Impl;
		connections
			c4: port RadioDriver_Attestation.trusted_ids -> trusted_ids;
			c5: port RadioDriver_Attestation.AutomationRequest -> AutomationRequest;
			c6: port RadioDriver_Attestation.OperatingRegion -> OperatingRegion;
			c7: port RadioDriver_Attestation.LineSearchTask -> LineSearchTask;
	end RadioDriver_Attestation.Impl;


	-----------------
	-- Attestation --
	-----------------

	thread CASE_AttestationManager_thr
		features
			trusted_ids: out data port CMASI::AddressArray.i;
			attestation_request: out event data port CASE_Model_Transformations::CASE_AttestationRequestMsg.Impl;
			attestation_response: in event data port CASE_Model_Transformations::CASE_AttestationResponseMsg.Impl;
		properties
			CASE_Properties::Component_Type => ATTESTATION;
			Dispatch_Protocol => Periodic;
			Period => 500ms;
			Compute_Execution_Time => 2ms .. 2ms;
	end CASE_AttestationManager_thr;

	thread implementation CASE_AttestationManager_thr.Impl
		properties
			CASE_Properties::Component_Impl => "CakeML";
			CASE_Properties::Cache_Timeout => 30;
			CASE_Properties::Cache_Size => 3;
			Dispatch_Protocol => Periodic;
	end CASE_AttestationManager_thr.Impl;
	
	process CASE_AttestationManager
		features
			trusted_ids: out data port CMASI::AddressArray.i;
			attestation_request: out event data port CASE_Model_Transformations::CASE_AttestationRequestMsg.Impl;
			attestation_response: in event data port CASE_Model_Transformations::CASE_AttestationResponseMsg.Impl;
		properties
			CASE_Scheduling::Domain => 4;
	end CASE_AttestationManager;
	
	process implementation CASE_AttestationManager.Impl
		subcomponents
			CASE_AttestationManager: thread CASE_AttestationManager_thr.Impl;
		connections
			c1: port CASE_AttestationManager.trusted_ids -> trusted_ids;
			c2: port CASE_AttestationManager.attestation_request -> attestation_request;
			c3: port attestation_response -> CASE_AttestationManager.attestation_response;
	end CASE_AttestationManager.Impl;

	thread CASE_AttestationGate_thr
		features
			trusted_ids: in data port CMASI::AddressArray.i;
			AutomationRequest_in: in event data port CMASI::AddressAttributedMessage.i;
			AutomationRequest_out: out event data port CMASI::AutomationRequest.i;
			OperatingRegion_in: in event data port CMASI::AddressAttributedMessage.i;
			OperatingRegion_out: out event data port CMASI::OperatingRegion.i;
			LineSearchTask_in: in event data port CMASI::AddressAttributedMessage.i;
			LineSearchTask_out: out event data port CMASI::LineSearchTask.i;
		properties
			CASE_Properties::Component_Type => MONITOR;
			CASE_Properties::Component_Spec => ("CASE_AttestationGate_policy");
			Dispatch_Protocol => Periodic;
			Period => 500ms;
			Compute_Execution_Time => 2ms .. 2ms;
		annex agree {**
--			fun IS_TRUSTED(src_id : CMASI::Address) : bool = exists id in trusted_ids, id = src_id;
--			guarantee CASE_AttestationGate_policy "Only messages from trusted sources shall be forwarded" :
--				if event(AutomationRequest_in) and IS_TRUSTED(AutomationRequest_in.id) then event(AutomationRequest_out) and not (event(OperatingRegion_out) or event(LineSearchTask_out)) and AutomationRequest_out = AutomationRequest_in.payload.AutomationRequest
--				else if event(OperatingRegion_in) and IS_TRUSTED(OperatingRegion_in.id) then event(OperatingRegion_out) and not (event(AutomationRequest_out) or event(LineSearchTask_out)) and OperatingRegion_out = OperatingRegion_in.payload.OperatingRegion
--				else if event(LineSearchTask_in) and IS_TRUSTED(LineSearchTask_in.id) then event(LineSearchTask_out) and not (event(AutomationRequest_out) or event(OperatingRegion_out)) and LineSearchTask_out = LineSearchTask_in.payload.LineSearchTask
--				else not (event(AutomationRequest_out) or event(OperatingRegion_out) or event(LineSearchTask_out));
		**};
	end CASE_AttestationGate_thr;

	thread implementation CASE_AttestationGate_thr.Impl
	end CASE_AttestationGate_thr.Impl;
	
	process CASE_AttestationGate
		features
			trusted_ids: in data port CMASI::AddressArray.i;
			AutomationRequest_in: in event data port CMASI::AddressAttributedMessage.i;
			AutomationRequest_out: out event data port CMASI::AutomationRequest.i;
			OperatingRegion_in: in event data port CMASI::AddressAttributedMessage.i;
			OperatingRegion_out: out event data port CMASI::OperatingRegion.i;
			LineSearchTask_in: in event data port CMASI::AddressAttributedMessage.i;
			LineSearchTask_out: out event data port CMASI::LineSearchTask.i;
		properties
			CASE_Scheduling::Domain => 5;
	end CASE_AttestationGate;
	
	process implementation CASE_AttestationGate.Impl
		subcomponents
			CASE_AttestationGate: thread CASE_AttestationGate_thr.Impl;
		connections
			c1: port trusted_ids -> CASE_AttestationGate.trusted_ids;
			c2: port AutomationRequest_in -> CASE_AttestationGate.AutomationRequest_in;
			c3: port CASE_AttestationGate.AutomationRequest_out -> AutomationRequest_out;
			c4: port OperatingRegion_in -> CASE_AttestationGate.OperatingRegion_in;
			c5: port CASE_AttestationGate.OperatingRegion_out -> OperatingRegion_out;
			c6: port LineSearchTask_in -> CASE_AttestationGate.LineSearchTask_in;
			c7: port CASE_AttestationGate.LineSearchTask_out -> LineSearchTask_out;
	end CASE_AttestationGate.Impl;


	-------------------------------------
	-- Line Search Task message Filter --
	-------------------------------------

	thread CASE_Filter_LST_thr
		features
			filter_in: in event data port CMASI::LineSearchTask.i;
			filter_out: out event data port CMASI::LineSearchTask.i;
		properties
			CASE_Properties::Component_Type => FILTER;
			CASE_Properties::Component_Spec => ("Req_Filter_LST");
			Dispatch_Protocol => Periodic;
			Period => 500ms;
			Compute_Execution_Time => 2ms .. 2ms;
		annex agree {**
			guarantee Req_Filter_LST "Well-formed Line Search Task message" : CASEAgree::WELL_FORMED_LINE_SEARCH_TASK(filter_out);
		**};
	end CASE_Filter_LST_thr;

	thread implementation CASE_Filter_LST_thr.Impl
	end CASE_Filter_LST_thr.Impl;
	
	process CASE_Filter_LST
		features
			filter_in: in event data port CMASI::LineSearchTask.i;
			filter_out: out event data port CMASI::LineSearchTask.i;
		properties
			CASE_Scheduling::Domain => 7;
	end CASE_Filter_LST;
	
	process implementation CASE_Filter_LST.Impl
		subcomponents
			CASE_Filter_LST: thread CASE_Filter_LST_thr.Impl;
		connections
			c1: port filter_in -> CASE_Filter_LST.filter_in;
			c2: port CASE_Filter_LST.filter_out -> filter_out;
	end CASE_Filter_LST.Impl;
	
	
	-------------------------------------
	-- Operating Region message Filter --
	-------------------------------------

	thread CASE_Filter_OR_thr
		features
			filter_in: in event data port CMASI::OperatingRegion.i;
			filter_out: out event data port CMASI::OperatingRegion.i;
		properties
			CASE_Properties::Component_Type => FILTER;
			CASE_Properties::Component_Spec => ("Req_Filter_OR");
			Dispatch_Protocol => Periodic;
			Period => 500ms;
			Compute_Execution_Time => 2ms .. 2ms;
		annex agree {**
			guarantee Req_Filter_OR "Well-formed Operating Region message" : CASEAgree::WELL_FORMED_OPERATING_REGION(filter_out);
		**};
	end CASE_Filter_OR_thr;

	thread implementation CASE_Filter_OR_thr.Impl
	end CASE_Filter_OR_thr.Impl;
	
	process CASE_Filter_OR
		features
			filter_in: in event data port CMASI::OperatingRegion.i;
			filter_out: out event data port CMASI::OperatingRegion.i;
		properties
			CASE_Scheduling::Domain => 8;
	end CASE_Filter_OR;
	
	process implementation CASE_Filter_OR.Impl
		subcomponents
			CASE_Filter_OR: thread CASE_Filter_OR_thr.Impl;
		connections
			c1: port filter_in -> CASE_Filter_OR.filter_in;
			c2: port CASE_Filter_OR.filter_out -> filter_out;
	end CASE_Filter_OR.Impl;
	
	
	---------------------------------------
	-- Automation Request message Filter --
	---------------------------------------

	thread CASE_Filter_AReq_thr
		features
			filter_in: in event data port CMASI::AutomationRequest.i;
			filter_out: out event data port CMASI::AutomationRequest.i;
		properties
			CASE_Properties::Component_Type => FILTER;
			CASE_Properties::Component_Spec => ("Req_Filter_AReq");
			Dispatch_Protocol => Periodic;
			Period => 500ms;
			Compute_Execution_Time => 2ms .. 2ms;
		annex agree {**
			guarantee Req_Filter_AReq "Well-formed Automation Request message" : CASEAgree::WELL_FORMED_AUTOMATION_REQUEST(filter_out);
		**};
	end CASE_Filter_AReq_thr;

	thread implementation CASE_Filter_AReq_thr.Impl
	end CASE_Filter_AReq_thr.Impl;
	
	process CASE_Filter_AReq
		features
			filter_in: in event data port CMASI::AutomationRequest.i;
			filter_out: out event data port CMASI::AutomationRequest.i;
		properties
			CASE_Scheduling::Domain => 6;
	end CASE_Filter_AReq;
	
	process implementation CASE_Filter_AReq.Impl
		subcomponents
			CASE_Filter_AReq: thread CASE_Filter_AReq_thr.Impl;
		connections
			c1: port filter_in -> CASE_Filter_AReq.filter_in;
			c2: port CASE_Filter_AReq.filter_out -> filter_out;
	end CASE_Filter_AReq.Impl;


	----------
	-- UxAS --
	----------
	thread UxAS_thr
        features
            AutomationRequest : in event data port CMASI::AutomationRequest.i;
            AirVehicleState : in event data port CMASI::AirVehicleState.i;
            OperatingRegion : in event data port CMASI::OperatingRegion.i;
            LineSearchTask: in event data port CMASI::LineSearchTask.i;
            AutomationResponse : out event data port CMASI::AutomationResponse.i;
        properties
            Dispatch_Protocol => Periodic;
            Period => 500ms;
            Compute_Execution_Time => 2ms .. 2ms;                
    end UxAS_thr;
    
    thread implementation UxAS_thr.Impl 
    end UxAS_thr.Impl;
    
	process UxAS
		features
			AutomationRequest : in event data port CMASI::AutomationRequest.i;
			AirVehicleState : in event data port CMASI::AirVehicleState.i;
			OperatingRegion : in event data port CMASI::OperatingRegion.i;
			LineSearchTask: in event data port CMASI::LineSearchTask.i;
			AutomationResponse : out event data port CMASI::AutomationResponse.i;
		properties
			CASE_Scheduling::Domain => 9;
	end UxAS;
	
	process implementation UxAS.Impl
		subcomponents
			UxAS: thread UxAS_thr.Impl;
		connections
			c1: port AutomationRequest -> UxAS.AutomationRequest;
			c2: port AirVehicleState -> UxAS.AirVehicleState;
			c3: port OperatingRegion -> UxAS.OperatingRegion;
			c4: port LineSearchTask -> UxAS.LineSearchTask;
			c6: port UxAS.AutomationResponse -> AutomationResponse;
	end UxAS.Impl;
	
	
	------------------------------
	-- Request-Response Monitor --
	------------------------------
	
	thread CASE_Monitor_Req_thr
		features
			observed: in event data port CMASI::AutomationResponse.i;
			reference_1: in event data port CMASI::AutomationRequest.i;
--			alert: out event data port Base_Types::Boolean;
		properties
			CASE_Properties::Component_Type => MONITOR; -- marks this component as a monitor
			CASE_Properties::Monitor_Latched => false; -- indicates if the monitor is latched
			CASE_Properties::Component_Spec => ("Req002_ReqRespMonitorEvent"); -- monitor guarantee
			Dispatch_Protocol => Periodic;
			Period => 500ms;
			Compute_Execution_Time => 2ms .. 2ms;
		annex agree {**

			-- a constant generated from the component property above, handy for expressing the monitor guarantee
--			const is_latched : bool = Get_Property(this, CASE_Properties::Monitor_Latched);

			-- Monitor policy (models the expected behavior in terms of the input ports)
			-- AutomationResponse (observed) occurs within two scheduling cycles after AutomationRequest (reference_1)
--			eq empty_day : bool = not event(observed) and not event(reference_1);
--			property CASE_Monitor_Req_Resp_policy = Historically(event(reference_1) or (empty_day and Yesterday(event(reference_1) or (empty_day and Yesterday(event(reference_1))))) => event(observed));		

			-- Monitor guarantee (guarantees on the output ports in terms of the input ports and monitor policy)
--			guarantee Req002_ReqRespMonitorEvent "The monitor shall only output an alert when the monitor policy is false" :
--				alert <=> false -> (is_latched and pre(event(alert))) or not CASE_Monitor_Req_Resp_policy;
		**};
	end CASE_Monitor_Req_thr;

	thread implementation CASE_Monitor_Req_thr.Impl
	end CASE_Monitor_Req_thr.Impl;
	
	process CASE_Monitor_Req
		features
			observed: in event data port CMASI::AutomationResponse.i;
			reference_1: in event data port CMASI::AutomationRequest.i;
--			alert: out event data port Base_Types::Boolean;
		properties
			CASE_Scheduling::Domain => 11;
	end CASE_Monitor_Req;
	
	process implementation CASE_Monitor_Req.Impl
		subcomponents
			CASE_Monitor_Req: thread CASE_Monitor_Req_thr.Impl;
		connections
			c1: port observed -> CASE_Monitor_Req.observed;
			c2: port reference_1 -> CASE_Monitor_Req.reference_1;
--			c3: port CASE_Monitor_Req.alert -> alert;
	end CASE_Monitor_Req.Impl;
	

	----------------------------------------
	-- Automation Response message Filter --
	----------------------------------------
	
	thread CASE_Filter_ARes_thr
		features
			filter_in: in event data port CMASI::AutomationResponse.i;
			filter_out: out event data port CMASI::AutomationResponse.i;
		properties
			CASE_Properties::Component_Type => FILTER;
			CASE_Properties::Component_Spec => ("Req_Filter_ARes");
			Dispatch_Protocol => Periodic;
			Period => 500ms;
			Compute_Execution_Time => 2ms .. 2ms;
		annex agree {**
			guarantee Req_Filter_ARes "Well-formed Automation Response message" : CASEAgree::WELL_FORMED_AUTOMATION_RESPONSE(filter_out);
		**};
	end CASE_Filter_ARes_thr;

	thread implementation CASE_Filter_ARes_thr.Impl
	end CASE_Filter_ARes_thr.Impl;
	
	process CASE_Filter_ARes
		features
			filter_in: in event data port CMASI::AutomationResponse.i;
			filter_out: out event data port CMASI::AutomationResponse.i;
		properties
			CASE_Scheduling::Domain => 12;
	end CASE_Filter_ARes;
	
	process implementation CASE_Filter_ARes.Impl
		subcomponents
			CASE_Filter_ARes: thread CASE_Filter_ARes_thr.Impl;
		connections
			c1: port filter_in -> CASE_Filter_ARes.filter_in;
			c2: port CASE_Filter_ARes.filter_out -> filter_out;
	end CASE_Filter_ARes.Impl;
	
	
	------------------------
	-- Fly Zones Database --
	------------------------

	thread FlyZonesDatabase_thr
		-- The KeepInZoneDatabase is a collection of polygons that represent areas on a map that the UAV can traverse.
		-- The database is populated at build-time and stored in memory.
		features
			keep_in_zones: out data port CMASI::Polygon.i;
			keep_out_zones: out data port CMASI::Polygon.i;
    properties
			Dispatch_Protocol => Periodic;
			Period => 500ms;
			Compute_Execution_Time => 2ms .. 2ms;
	end FlyZonesDatabase_thr;

	thread implementation FlyZonesDatabase_thr.Impl
	end FlyZonesDatabase_thr.Impl;
	
	process FlyZonesDatabase
		features
			keep_in_zones: out data port CMASI::Polygon.i;
			keep_out_zones: out data port CMASI::Polygon.i;
		properties
			CASE_Scheduling::Domain => 10;
	end FlyZonesDatabase;
	
	process implementation FlyZonesDatabase.Impl
		subcomponents
			FlyZonesDatabase: thread FlyZonesDatabase_thr.Impl;
		connections
			c1: port FlyZonesDatabase.keep_in_zones -> keep_in_zones;
			c2: port FlyZonesDatabase.keep_out_zones -> keep_out_zones;
	end FlyZonesDatabase.Impl;
	
	
	----------------------
	-- Geofence Monitor --
	----------------------
	
	thread CASE_Monitor_Geo_thr
		features
			keep_in_zones: in data port CMASI::Polygon.i;
			keep_out_zones: in data port CMASI::Polygon.i;
			alert: out event port;
			observed: in event data port CMASI::AutomationResponse.i;
			output: out event data port CMASI::AutomationResponse.i;
		properties
			CASE_Properties::Component_Type => MONITOR; -- marks this component as a monitor
			CASE_Properties::Component_Spec => ("GeofenceMonitor_alert_event", "GeofenceMonitor_output_event", "GeofenceMonitor_output_data"); -- monitor guarantee
			CASE_Properties::Monitor_Latched => true; -- indicates if the monitor is latched
			Dispatch_Protocol => Periodic;
			Period => 500ms;
			Compute_Execution_Time => 2ms .. 2ms;
		annex agree {**
			-- a constant generated from the component property above, handy for expressing the monitor guarantee
--			const is_latched : bool = Get_Property(this, CASE_Properties::Monitor_Latched);

			-- Monitor policy (models the expected behavior in terms of the input ports)
--			property CASE_Monitor_Coord_policy = Historically(event(observed) => (WAYPOINTS_IN_ZONE(GET_MISSION_COMMAND(observed), keep_in_zones) and 
--			                WAYPOINTS_NOT_IN_ZONE(GET_MISSION_COMMAND(observed), keep_out_zones)));

			-- Monitor guarantee (guarantees on the output ports in terms of the input ports and monitor policy)
--			guarantee GeofenceMonitor_alert_event "An alert is generated only when observed is invalid" :
--				event(alert) <=> false -> (is_latched and pre(event(alert))) or not CASE_Monitor_Coord_policy;
--			guarantee GeofenceMonitor_output_event "The output event fires only when observed is valid" :
--				event(output) <=> event(observed) and not event(alert);
--			guarantee GeofenceMonitor_output_data "Output is equal to observed when observed is valid" :
--				event(observed) and not event(alert) => output = observed;
			
--			fun GET_MISSION_COMMAND(automationResponse: CMASI::AutomationResponse.i) : CMASI::MissionCommand.i =
--			              automationResponse.MissionCommandList[0];
--			fun WAYPOINTS_IN_ZONE(mission : CMASI::MissionCommand.i, zone : CMASI::Polygon.i) : bool =
--			              forall waypoint in mission.WaypointList, WAYPOINT_IN_ZONE_RECTANGLE(waypoint, zone);
--			fun WAYPOINTS_NOT_IN_ZONE(mission : CMASI::MissionCommand.i, zone : CMASI::Polygon.i) : bool =
--			              forall waypoint in mission.WaypointList, not WAYPOINT_IN_ZONE_RECTANGLE(waypoint, zone);
			-- Assumes rectangle that is defined by two corners so it is aligned
			-- with the origin (not rotated in space)
			-- Assumes that the altitude is the same in all the coordinates
			-- Assmes zone[0] is the bottom left corner and zone[2] in the upper right corner
--			fun WAYPOINT_IN_ZONE_RECTANGLE(waypoint : CMASI::Waypoint.i, zone : CMASI::Polygon.i) : bool =
--			                  (waypoint.Latitude >= (zone.BoundaryPointsList[0]).Latitude)
--			              and (waypoint.Latitude <= (zone.BoundaryPointsList[1]).Latitude)
--			              and (waypoint.Longitude >= (zone.BoundaryPointsList[0]).Longitude)
--			              and (waypoint.Longitude <= (zone.BoundaryPointsList[1]).Longitude)
--			              and (waypoint.Altitude >= (zone.BoundaryPointsList[0]).Altitude);
		**};
	end CASE_Monitor_Geo_thr;

	thread implementation CASE_Monitor_Geo_thr.Impl
	end CASE_Monitor_Geo_thr.Impl;
	
	process CASE_Monitor_Geo
		features
			keep_in_zones: in data port CMASI::Polygon.i;
			keep_out_zones: in data port CMASI::Polygon.i;
			alert: out event port;
			observed: in event data port CMASI::AutomationResponse.i;
			output: out event data port CMASI::AutomationResponse.i;
		properties
			CASE_Scheduling::Domain => 13;
	end CASE_Monitor_Geo;
	
	process implementation CASE_Monitor_Geo.Impl
		subcomponents
			CASE_Monitor_Geo: thread CASE_Monitor_Geo_thr.Impl;
		connections
			c1: port keep_in_zones -> CASE_Monitor_Geo.keep_in_zones;
			c2: port keep_out_zones -> CASE_Monitor_Geo.keep_out_zones;
			c3: port CASE_Monitor_Geo.alert -> alert;
			c4: port observed -> CASE_Monitor_Geo.observed;
			c5: port CASE_Monitor_Geo.output -> output;
	end CASE_Monitor_Geo.Impl;
	
	
	----------------------
	-- Waypoint Manager --
	----------------------
	thread WaypointPlanManagerService_thr
        features
            AutomationResponse: in event data port CMASI::AutomationResponse.i;
            AirVehicleState: in event data port CMASI::AirVehicleState.i;
            MissionCommand: out event data port CMASI::MissionCommand.i;
            ReturnHome: in event port;
        properties
            Dispatch_Protocol => Periodic;
            Period => 500ms;
            Compute_Execution_Time => 2ms .. 2ms;
    end WaypointPlanManagerService_thr;
    
    thread implementation WaypointPlanManagerService_thr.Impl
        
    end WaypointPlanManagerService_thr.Impl;
	
	process WaypointPlanManagerService
		features
			-- Subscribed Messages
			AutomationResponse: in event data port CMASI::AutomationResponse.i;
			AirVehicleState: in event data port CMASI::AirVehicleState.i;
			-- Sent Messages
			MissionCommand: out event data port CMASI::MissionCommand.i;

			-- Return Home
			ReturnHome: in event port;
		properties
			CASE_Scheduling::Domain => 14;
	end WaypointPlanManagerService;
	
	process implementation WaypointPlanManagerService.Impl
		subcomponents
			WaypointPlanManagerService: thread WaypointPlanManagerService_thr.Impl;
		connections
			c1: port AutomationResponse -> WaypointPlanManagerService.AutomationResponse;
			c2: port AirVehicleState -> WaypointPlanManagerService.AirVehicleState;
			c3: port WaypointPlanManagerService.MissionCommand -> MissionCommand;
			c4: port ReturnHome -> WaypointPlanManagerService.ReturnHome;
	end WaypointPlanManagerService.Impl;
	
	
	-----------------
	-- UART Driver --
	-----------------
	
	process UARTDriver
		features
--			recv_data: in event data port CASE_Model_Transformations::CASE_UART_Msg.Impl;
			MissionCommand: in event data port CMASI::MissionCommand.i;

--			send_data: out event data port CASE_Model_Transformations::CASE_UART_Msg.Impl;
			AirVehicleState: out event data port CMASI::AirVehicleState.i;
		properties
			CASE_Scheduling::Domain => 0;
	end UARTDriver;
	
	process implementation UARTDriver.Impl
		subcomponents
			UARTDriver: thread Drivers::UARTDriver.Impl;
		connections
--			c1: port recv_data -> UARTDriver.recv_data;
			c2: port MissionCommand -> UARTDriver.MissionCommand;
--			c3: port UARTDriver.send_data -> send_data;
			c4: port UARTDriver.AirVehicleState -> AirVehicleState;
	end UARTDriver.Impl;
	
	
	---------------------
	-- Software system --
	---------------------
    ----------------------------------------------------------------------
    processor proc
    end proc;

    processor implementation proc.Impl
        properties
            Frame_Period => 1000ms;
            Clock_Period => 2ms;
            CASE_Scheduling::Max_Domain => 15;
            CASE_Scheduling::Schedule_Source_Text => "kernel/domain_schedule.c";
    end proc.Impl;
    ----------------------------------------------------------------------
    
	system SW
		
		annex agree {**
--			guarantee Req001_SW "The radio_send outputs only well formed CASE_RF_Msg.Impl types" :
--				 if (event(radio_recv) and CASEAgree::WellformedCASE_RF_Msg(radio_recv, CASEConsts::UAV_ID, CASEConsts::GS_ID))
				--   event(radio_send) and radio_send = radio_recv and CASEAgree::WellformedCASE_RF_Msg(radio_send, CASEConsts::UAV_ID, CASEConsts::GS_ID)
				-- else
				--   not event(radio_send);
--			CASEAgree::WellformedCASE_RF_Msg(radio_send, CASEConsts::UAV_ID, CASEConsts::GS_ID);
			
--			guarantee Req002_SW "The uart_send outputs only well formed CASE_RF_Msg.Impl types" :
				-- if (event(uart_recv) and CASEAgree::WellformedCASE_UART_Msg(uart_recv))
				--   event(uart_send) and uart_send = uart_recv and CASEAgree::WellformedCASE_UART_Msg(uart_send)
				-- else
				--   not event(uart_send);
--				CASEAgree::WellformedCASE_UART_Msg(uart_send);
		**};

	end SW;

	system implementation SW.Impl
		subcomponents
			proc: processor proc.Impl;
			FC_UART: process UARTDriver.Impl;
			RADIO: process RadioDriver_Attestation.Impl;
			FlyZones: process FlyZonesDatabase.Impl;
			UXAS: process UxAS.Impl;
			WPM: process WaypointPlanManagerService.Impl;
			AM_Gate: process CASE_AttestationGate.Impl;
			FLT_LST: process CASE_Filter_LST.Impl;
			MON_REQ: process CASE_Monitor_Req.Impl;
			MON_GEO: process CASE_Monitor_Geo.Impl;
		connections

			----------- 	           
			-- FC_UART
			-----------
			c04: port FC_UART.AirVehicleState -> UXAS.AirVehicleState;
			c05: port FC_UART.AirVehicleState -> WPM.AirVehicleState;
			---------
			-- RADIO
			---------

			c07: port RADIO.AutomationRequest -> AM_Gate.AutomationRequest_in;
			c08: port RADIO.OperatingRegion -> AM_Gate.OperatingRegion_in;
			c09: port RADIO.LineSearchTask -> AM_Gate.LineSearchTask_in;
			c10: port AM_Gate.AutomationRequest_out -> UXAS.AutomationRequest;
			c11: port AM_Gate.OperatingRegion_out -> UXAS.OperatingRegion;
			c12: port AM_Gate.LineSearchTask_out -> FLT_LST.filter_in;
			c13: port FLT_LST.filter_out -> UXAS.LineSearchTask;
			c14: port RADIO.trusted_ids -> AM_Gate.trusted_ids;

			--------
			-- UXAS
			--------
			c15: port UXAS.AutomationResponse -> MON_GEO.observed;
			c17: port FlyZones.keep_in_zones -> MON_GEO.keep_in_zones;
			c18: port FlyZones.keep_out_zones -> MON_GEO.keep_out_zones;
--			c19: port UXAS.AutomationResponse -> MON_GEO.observed;
			c20: port MON_GEO.alert -> WPM.ReturnHome;
			c21: port AM_Gate.AutomationRequest_out -> MON_REQ.reference_1;
			c22: port UXAS.AutomationResponse -> MON_REQ.observed;

			--------
			-- WPM
			--------
--			c23: port MON_GEO.alert -> WPM.ReturnHome;
			c24: port WPM.MissionCommand -> FC_UART.MissionCommand;
			c25: port MON_GEO.output -> WPM.AutomationResponse;
			
    properties
            Actual_Processor_Binding => (reference (proc)) applies to FC_UART;
            Actual_Processor_Binding => (reference (proc)) applies to RADIO;
            Actual_Processor_Binding => (reference (proc)) applies to FlyZones;
            Actual_Processor_Binding => (reference (proc)) applies to UXAS;
            Actual_Processor_Binding => (reference (proc)) applies to WPM;
            Actual_Processor_Binding => (reference (proc)) applies to AM_GATE;
            Actual_Processor_Binding => (reference (proc)) applies to FLT_LST;
            Actual_Processor_Binding => (reference (proc)) applies to MON_REQ;
            Actual_Processor_Binding => (reference (proc)) applies to MON_GEO;
           
            HAMR::Default_Bit_Width => 32;
            HAMR::Default_Max_Sequence_Size => 1;
            HAMR::Max_String_Size => 256;
            HAMR::Bit_Codec_Raw_Connections => true;         
	end SW.Impl;
	
end SW;